import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


TOKEN = '7907057772:AAGAZd0BcYeRT6jvsCpOKsjVvalu3SS-Uco'
bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.WARNING)


inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', callback_data='send_message')],
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–æ–¥—ñ—ó–≤', callback_data='show_drivers')],
        [InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Å–∞–∂–∏—Ä—ñ–≤', callback_data='show_passengers')]
    ],
)


@dp.message(lambda message: message.text == '/start')
async def cmd_start(message: Message):
    logging.info(f"User {message.from_user.id} started the bot.")
    await message.answer("–¶–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –±–æ—Ç –û–¥–µ—Å–∞ - –ü—ñ–≤–¥–µ–Ω–Ω–µ —Ç–∞ –ü—ñ–≤–¥–µ–Ω–Ω–µ - –û–¥–µ—Å–∞:", reply_markup=inline_keyboard)

 
@dp.message()
async def handle_message(message: Message):
    if len(message.text.split('\n')) == 7:
        lines = message.text.split("\n")
        role = lines[0]
        route = lines[1]
        time = lines[2]
        price = lines[3]
        phone = lines[4]
        seats = lines[5]
        conditions = lines[6]
    else:
        f"–î–ª—è —Ç–æ–≥–æ —â–æ–± —Å–∏—Å—Ç–µ–º–∞ –º–æ–≥–ª–∞ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –π –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–æ–Ω–æ –º–∞—î –±—É—Ç–∏ –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –π —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 7 —Ä—è–¥–∫—ñ–≤:"

    logging.info(f"{message.from_user.username}, {message.from_user.id}: {message.text}")

    response = message.text
    '''response = (
        f"üìå **{role}**\n"
        f"üìç –ó–≤—ñ–¥–∫–∏ - –ö—É–¥–∏: {route}\n"
        f"üïí –ß–∞—Å: {time}\n"
        f"üí∞ –¶—ñ–Ω–∞: {price}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        f"ü™ë –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å: {seats}\n"
        f"‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Å–∞–∂–∏—Ä—ñ–≤ –ø–æ–∑–∞–¥—É (2 –∞–±–æ 3): {conditions}\n"
    )'''

    await message.answer(response)


@dp.message(lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤')
async def show_drivers(message: Message):
    logging.info(f"User {message.from_user.id} requested drivers list.")
    await message.answer("–¢—É—Ç –±—É–¥—É—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ñ –≤–æ–¥—ñ—ó.")


@dp.message(lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –ø–∞—Å–∞–∂–∏—Ä—ñ–≤')
async def show_passengers(message: Message):
    logging.info(f"User {message.from_user.id} requested passengers list.")
    await message.answer("–¢—É—Ç –±—É–¥—É—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø–∞—Å–∞–∂–∏—Ä–∏.")


async def main():
    logging.info("Bot is starting...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    print('The bot is running!')
    asyncio.run(main())
