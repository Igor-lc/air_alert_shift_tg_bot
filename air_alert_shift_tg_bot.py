import asyncio
import logging
import json
import sys
from datetime import datetime, timedelta
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")
ALERT_API = "https://alerts.com.ua/api/states"
CITY_NAME = "–º. –ö–∏—ó–≤"
LOG_FILE = "log.txt"
REPORT_FILE = "log_report.txt"
SHIFT_FILE = "shift_data.json"
DEBUG_OVERRIDE_ALERT = 0  # 1 –æ–∑–Ω–∞—á–∞—î —â–æ –¥–ª—è –±–æ—Ç–∞ —Ç—Ä–∏–≤–æ–≥–∞ —î –∑–∞–≤–∂–¥–∏, —Ü–µ –¥–ª—è —Ç–µ—Å—Ç—É. 0 - —Ç—Ä–∏–≤–æ–≥–∞ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –∞–ø—ñ.

logger = logging.getLogger("bot")
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)
logger.propagate = False

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–±–µ—Ä—ñ–≥–∞—î user_id —ñ —á–∞—Å –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏
CONFIRMATION_WAITING = {}


# –ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    buttons = [
        [
            KeyboardButton(text='–ü–æ—á–∞—Ç–æ–∫ –∑–º—ñ–Ω–∏'),
            KeyboardButton(text='–Ø –≤ –±–æ–º–±–æ—Å—Ö–æ–≤–∏—â—ñ'),
            KeyboardButton(text='–í–∂–µ –ø—Ä–∞—Ü—é—é'),
        ],
        [
            KeyboardButton(text='–ö—ñ–Ω–µ—Ü—å –∑–º—ñ–Ω–∏'),
            KeyboardButton(text='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î —Ç—Ä–∏–≤–æ–≥–∞ –≤ –ö–∏—î–≤—ñ???'),
        ],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


SHIFT_DATA = {}


# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î shift_data.json —É –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É –ø–∞–º º—è—Ç—å
def load_shift_data():
    global SHIFT_DATA
    try:
        with open(SHIFT_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)
            for uid, data in raw.items():
                data["shift_start"] = datetime.fromisoformat(data["shift_start"])
                for rec in data["records"]:
                    rec["in"] = datetime.fromisoformat(rec["in"])
                    if "out" in rec:
                        rec["out"] = datetime.fromisoformat(rec["out"])
            SHIFT_DATA = {int(k): v for k, v in raw.items()}
    except FileNotFoundError:
        SHIFT_DATA = {}


# –ó–±–µ—Ä—ñ–≥–∞—î SHIFT_DATA –Ω–∞–∑–∞–¥ —É —Ñ–∞–π–ª
def save_shift_data():
    to_dump = {}
    for uid, data in SHIFT_DATA.items():
        records = []
        for rec in data["records"]:
            r = {"in": rec["in"].isoformat()}
            if "out" in rec:
                r["out"] = rec["out"].isoformat()
            records.append(r)
        to_dump[uid] = {
            "username": data["username"],
            "shift_start": data["shift_start"].isoformat(),
            "records": records,
        }
    with open(SHIFT_FILE, "w", encoding="utf-8") as f:
        json.dump(to_dump, f, ensure_ascii=False, indent=2)


# –ü–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ —Ç—Ä–∏–≤–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ DEBUG —É–≤—ñ–º–∫–Ω–µ–Ω–æ
async def is_alert_active_in_kyiv():
    if DEBUG_OVERRIDE_ALERT:
        return True
    try:
        data = requests.get(ALERT_API, timeout=5).json()
        for region in data.get("states", []):
            if region.get("name") == CITY_NAME:
                return region.get("alert", False)
    except Exception:
        return False
    return False


# –†–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–æ–≥–∏ (–±–µ–∑ DEBUG)
async def get_real_alert_status():
    try:
        data = requests.get(ALERT_API, timeout=5).json()
        for region in data.get("states", []):
            if region.get("name") == CITY_NAME:
                return region.get("alert", False)
    except Exception:
        return False
    return False


# –ó–∞–ø–∏—Å—É—î –¥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ª–æ–≥
def log_action(username, action, timestamp, delta=None):
    line = f"{timestamp.strftime('%Y-%m-%d %H:%M:%S')} ‚Äî {username} ‚Äî {action}"
    if delta:
        line += f" ‚Äî stop-time: {delta}"
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")


# –ó–∞–ø–∏—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä–∞ –≤ –ª–æ–≥
def log_message(username, message):
    now = datetime.now().replace(microsecond=0)
    entry = f"{now.strftime('%Y-%m-%d %H:%M:%S')} ‚Äî @{username}: {message}"
    logger.info(entry)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(entry + "\n")


# –ó–∞–ø–∏—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞ –≤ –ª–æ–≥
def log_bot_response(username, response):
    now = datetime.now().replace(microsecond=0)
    line = f"{now.strftime('%Y-%m-%d %H:%M:%S')} ‚Äî BOT to @{username}: {response}"
    logger.info(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")


# –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é —ñ –ª–æ–≥–æ–º
async def send_with_keyboard(message, text):
    await message.answer(text, reply_markup=get_main_keyboard())
    log_bot_response(message.from_user.username or f"id_{message.from_user.id}", text)


# –Ø–∫—â–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ "123" ‚Äî —Å–∫–∞—Å–æ–≤—É—î –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def confirmation_timeout(user_id, message):
    await asyncio.sleep(7)
    if user_id in CONFIRMATION_WAITING:
        del CONFIRMATION_WAITING[user_id]
        await send_with_keyboard(message, "‚åõ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–Ω–µ –≤–≤–µ–¥–µ–Ω–æ 123).")


@dp.message(lambda message: message.text == '/start')
async def cmd_start(message):
    await send_with_keyboard(message, "üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")


@dp.message()
async def handle_main(message):
    user = message.from_user
    now = datetime.now().replace(microsecond=0)
    username = user.username or f"id_{user.id}"
    log_message(username, message.text)

    user_data = SHIFT_DATA.get(user.id)
    shift_info = f"\n–ó–º—ñ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∑ {user_data['shift_start'].strftime('%Y-%m-%d %H:%M:%S')}" if user_data else "\n–ó–º—ñ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

    if user.id in CONFIRMATION_WAITING:
        if message.text == "123":
            shift_start = user_data['shift_start']
            summary = f"üìä –ó–≤—ñ—Ç –∑–º—ñ–Ω–∏ {username}  |  –ó {shift_start.strftime('%Y-%m-%d %H:%M:%S')}  |  –¥–æ {now.strftime('%Y-%m-%d %H:%M:%S')}\n"
            total_minutes = 0
            for rec in user_data["records"]:
                if "in" in rec and "out" in rec:
                    delta = rec["out"] - rec["in"]
                    minutes = round(delta.total_seconds() / 60)
                    total_minutes += minutes
                    summary += f"‚Ä¢ {rec['in'].strftime('%H:%M:%S')} ‚Üí {rec['out'].strftime('%H:%M:%S')} = {minutes} —Ö–≤\n"
            summary += f"‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π stop-time: {total_minutes} —Ö–≤"
            with open(REPORT_FILE, "a", encoding="utf-8") as f:
                f.write(summary + "\n\n")
            await send_with_keyboard(message, summary)
            log_action(username, "–∫—ñ–Ω–µ—Ü—å –∑–º—ñ–Ω–∏", now, f"{total_minutes} —Ö–≤")
            del SHIFT_DATA[user.id]
            save_shift_data()
            del CONFIRMATION_WAITING[user.id]
            return
        else:
            del CONFIRMATION_WAITING[user.id]
            await send_with_keyboard(message, "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —ñ–Ω—à—É –¥—ñ—é.")

    if message.text == "–ü–æ—á–∞—Ç–æ–∫ –∑–º—ñ–Ω–∏":
        if user.id in SHIFT_DATA:
            await send_with_keyboard(message, f"‚ö†Ô∏è –ó–º—ñ–Ω–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∑ {user_data['shift_start'].strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            SHIFT_DATA[user.id] = {"username": username, "shift_start": now, "records": []}
            log_action(username, "–ø–æ—á–∞—Ç–æ–∫ –∑–º—ñ–Ω–∏", now)
            save_shift_data()
            await send_with_keyboard(message, f"‚úÖ –ü–æ—á–∞—Ç–æ–∫ –∑–º—ñ–Ω–∏ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ: {now.strftime('%Y-%m-%d %H:%M:%S')}")

    elif message.text == "–Ø –≤ –±–æ–º–±–æ—Å—Ö–æ–≤–∏—â—ñ":
        if not user_data:
            await send_with_keyboard(message, "‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –∑–º—ñ–Ω—É.")
            return
        if await is_alert_active_in_kyiv():
            records = user_data["records"]
            if records and "out" not in records[-1]:
                await send_with_keyboard(message, "üõë –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ –±–æ–º–±–æ—Å—Ö–æ–≤–∏—â—ñ." + shift_info)
            else:
                records.append({"in": now})
                log_action(username, "–≤ –±–æ–º–±–æ—Å—Ö–æ–≤–∏—â—ñ", now)
                save_shift_data()
                await send_with_keyboard(message, f"üìç {now.strftime('%Y-%m-%d %H:%M:%S')} ‚Äî –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: –≤–∏ –≤ –±–æ–º–±–æ—Å—Ö–æ–≤–∏—â—ñ" + shift_info)
        else:
            await send_with_keyboard(message, f"‚ùå {now.strftime('%Y-%m-%d %H:%M:%S')} ‚Äî –¢—Ä–∏–≤–æ–≥–∏ –Ω–µ–º–∞—î, –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ." + shift_info)

    elif message.text == "–í–∂–µ –ø—Ä–∞—Ü—é—é":
        if not user_data:
            await send_with_keyboard(message, "‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –∑–º—ñ–Ω—É.")
            return
        records = user_data["records"]
        if records and "in" in records[-1] and "out" not in records[-1]:
            records[-1]["out"] = now
            delta = now - records[-1]["in"]
            minutes = round(delta.total_seconds() / 60)
            log_action(username, "–≤–∂–µ –ø—Ä–∞—Ü—é—é", now, f"{minutes} —Ö–≤")
            save_shift_data()
            await send_with_keyboard(message, f"üõ†Ô∏è {now.strftime('%Y-%m-%d %H:%M:%S')} ‚Äî –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ. ‚è±Ô∏è Stop-time: {minutes} —Ö–≤" + shift_info)
        else:
            await send_with_keyboard(message, f"‚ùå {now.strftime('%Y-%m-%d %H:%M:%S')} ‚Äî –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ –±–æ–º–±–æ—Å—Ö–æ–≤–∏—â—ñ. –ù–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ." + shift_info)

    elif message.text == "–ö—ñ–Ω–µ—Ü—å –∑–º—ñ–Ω–∏":
        if not user_data:
            await send_with_keyboard(message, "‚ö†Ô∏è –ó–º—ñ–Ω–∞ –Ω–µ –±—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞.")
            return
        CONFIRMATION_WAITING[user.id] = now
        await send_with_keyboard(message, "‚ö†Ô∏è –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –≤–≤–µ–¥—ñ—Ç—å 123 –ø—Ä–æ—Ç—è–≥–æ–º 7 —Å–µ–∫—É–Ω–¥. –¶–µ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
        asyncio.create_task(confirmation_timeout(user.id, message))

    elif message.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î —Ç—Ä–∏–≤–æ–≥–∞ –≤ –ö–∏—î–≤—ñ???":
        real_alert = await get_real_alert_status()
        if real_alert:
            await send_with_keyboard(message, "üö®üö®üö® –£–≤–∞–≥–∞! –í –º.–ö–∏—ó–≤ –æ–≥–æ–ª–æ—à–µ–Ω–æ —Ç—Ä–∏–≤–æ–≥—É.")
        else:
            await send_with_keyboard(message, "‚úÖ –í –º.–ö–∏—ó–≤ —Ç—Ä–∏–≤–æ–≥–∏ –Ω–µ–º–∞—î.")


async def main():
    load_shift_data()
    logger.info("Bot is running...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())